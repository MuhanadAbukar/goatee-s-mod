buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net/"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            name = "jitpack"
            url = "https://jitpack.io"
        }

    }
    dependencies {
        classpath('com.anatawa12.forge:ForgeGradle:1.2-1.0.+') {
            changing = true
        }

    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
}

apply plugin: 'forge'


version = "1.7"
group = "testmod" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "test"

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "eclipse"

}

sourceCompatibility = 1.8
targetCompatibility = 1.8


dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"

    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

repositories {
    maven {
        name = "jitpack"
        url = "https://jitpack.io"
    }

}

def mixinProviderGroup = "com.github.LegacyModdingMC.UniMixins"
def mixinProviderModule = "_unimixins-all-1.7.10"
def mixinProviderVersion = "0.1.6"
def mixinProviderSpec = "${mixinProviderGroup}:${mixinProviderModule}:${mixinProviderVersion}:dev"

dependencies {
    annotationProcessor(mixinProviderSpec)
    implementation(mixinProviderSpec)
}

def mixingConfigRefMap = 'mixins.' + project.modId + '.refmap.json'
def mixinTmpDir = buildDir.path + File.separator + 'tmp' + File.separator + 'mixins'
def refMap = "${mixinTmpDir}" + File.separator + mixingConfigRefMap
def mixinSrg = "${mixinTmpDir}" + File.separator + "mixins.srg"

tasks.named("compileJava", JavaCompile).configure {
    doFirst {
        new File(mixinTmpDir).mkdirs()
    }
    options.compilerArgs += ["-AreobfSrgFile=${tasks.reobf.srg}",
                             "-AoutSrgFile=${mixinSrg}",
                             "-AoutRefMapFile=${refMap}",
                             // Elan: from what I understand they are just some linter configs so you get some warning on how to properly code
                             "-XDenableSunApiLintControl",
                             "-XDignore.symbol.file"]
}

jar {
    manifest.attributes('TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
            'MixinConfigs': "mixins." + project.modId + ".json",
            'FMLCorePluginContainsFMLMod': 'true')
}

reobf {
    addExtraSrgFile mixinSrg
}

processResources {
    setDuplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

